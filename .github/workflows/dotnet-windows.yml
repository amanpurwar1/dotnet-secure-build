name: .NET Secure Build with Installer
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  id-token: write
  contents: read
  security-events: write
jobs:
  build-and-secure:
    runs-on: windows-latest
    
    outputs:
      build_sha: ${{ steps.hash.outputs.build_sha }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
          
      # - name: List Directory Structure
      #   run: |
      #     dir /s /b
          
      - name: Generate Build Manifest
        run: |
          echo "Build started at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" > build-manifest.txt
          echo "Repository: ${{ github.repository }}" >> build-manifest.txt
          echo "Commit: ${{ github.sha }}" >> build-manifest.txt
          echo "Branch: ${{ github.ref }}" >> build-manifest.txt
          
      - name: Verify Dependencies
        run: |
          # First ensure the project exists
          if (Test-Path "MyApp.csproj") {
            $projectPath = "MyApp.csproj"
          } elseif (Test-Path "src\MyApp.csproj") {
            $projectPath = "src\MyApp.csproj"
          } else {
            Write-Error "Could not find project file"
            exit 1
          }
          
          dotnet list $projectPath package --include-transitive > dependencies.txt
          dotnet restore $projectPath
          
      - name: Build
        run: |
          # Use the same project path logic
          if (Test-Path "MyApp.csproj") {
            $projectPath = "MyApp.csproj"
          } elseif (Test-Path "src\MyApp.csproj") {
            $projectPath = "src\MyApp.csproj"
          } else {
            Write-Error "Could not find project file"
            exit 1
          }
          
          dotnet publish $projectPath `
            --configuration Release `
            --runtime win-x64 `
            --self-contained true `
            /p:PublishSingleFile=true
          
          # Create build info file
          Get-ChildItem -Recurse -Filter *.dll,*.exe -Path bin/Release/net8.0/win-x64/publish/ | ForEach-Object {
            $hash = (Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash
            "$($_.Name) - $hash" >> build-hashes.txt
          }
          
      - name: Run Tests
        run: |
          if (Test-Path "MyApp.csproj") {
            $projectPath = "MyApp.csproj"
          } elseif (Test-Path "src\MyApp.csproj") {
            $projectPath = "src\MyApp.csproj"
          } else {
            Write-Error "Could not find project file"
            exit 1
          }
          
          dotnet test $projectPath --configuration Release --verbosity normal
          
      - name: Setup WiX Toolset
        run: |
          # Download and install WiX toolset
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe -OutFile wix311.exe
          Start-Process -FilePath .\wix311.exe -ArgumentList '/install','/quiet' -Wait
          
      - name: Create Installer
        run: |
          # Create a WiX project file (product.wxs)
          @"
          <?xml version='1.0' encoding='UTF-8'?>
          <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'>
            <Product Name='MyApp' Manufacturer='Your Company'
                     Id='*' UpgradeCode='12345678-1234-1234-1234-123456789012'
                     Language='1033' Codepage='1252' Version='1.0.0'>
              <Package Id='*' Keywords='Installer' Description='MyApp Installer'
                       Comments='MyApp is a registered trademark of Your Company' 
                       Manufacturer='Your Company' InstallerVersion='100' Languages='1033' 
                       Compressed='yes' SummaryCodepage='1252' />
              <Media Id='1' Cabinet='Sample.cab' EmbedCab='yes' DiskPrompt='CD-ROM #1' />
              <Directory Id='TARGETDIR' Name='SourceDir'>
                <Directory Id='ProgramFilesFolder' Name='PFiles'>
                  <Directory Id='MyCompany' Name='Your Company'>
                    <Directory Id='INSTALLDIR' Name='MyApp'>
                      <Component Id='MainExecutable' Guid='12345678-1234-1234-1234-123456789012'>
                        <File Id='MyAppEXE' Name='MyApp.exe' DiskId='1' 
                              Source='bin/Release/net8.0/win-x64/publish/MyApp.exe' 
                              KeyPath='yes' />
                      </Component>
                    </Directory>
                  </Directory>
                </Directory>
              </Directory>
              <Feature Id='Complete' Level='1'>
                <ComponentRef Id='MainExecutable' />
              </Feature>
            </Product>
          </Wix>
          "@ | Out-File -FilePath product.wxs -Encoding UTF8
          
          # Build the installer
          & 'C:\Program Files (x86)\WiX Toolset v3.11\bin\candle.exe' product.wxs
          & 'C:\Program Files (x86)\WiX Toolset v3.11\bin\light.exe' product.wixobj
          
      - name: Generate Build Hash
        id: hash
        run: |
          $buildHash = (Get-FileHash -Path "build-hashes.txt" -Algorithm SHA256).Hash
          echo "build_sha=$buildHash" >> $env:GITHUB_OUTPUT
          echo "Build Hash: $buildHash" >> build-manifest.txt
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secure-build
          path: |
            bin/Release/net8.0/win-x64/publish/
            product.msi
            build-manifest.txt
            build-hashes.txt
            dependencies.txt
          retention-days: 10
